// Mocks generated by Mockito 5.4.4 from annotations
// in tasks_app/test/unity_tests/shared/packages/tasks/domain/usecases/add_new_task.usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter/material.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tasks_app/shared/packages/tasks/tasks.exports.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeITasksDatasource_0 extends _i1.SmartFake
    implements _i2.ITasksDatasource {
  _FakeITasksDatasource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeITasksRepository_1 extends _i1.SmartFake
    implements _i2.ITasksRepository {
  _FakeITasksRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TasksRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTasksRepository extends _i1.Mock implements _i2.TasksRepository {
  MockTasksRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ITasksDatasource get datasource => (super.noSuchMethod(
        Invocation.getter(#datasource),
        returnValue: _FakeITasksDatasource_0(
          this,
          Invocation.getter(#datasource),
        ),
      ) as _i2.ITasksDatasource);

  @override
  _i3.Future<List<_i2.Task>> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i3.Future<List<_i2.Task>>.value(<_i2.Task>[]),
      ) as _i3.Future<List<_i2.Task>>);

  @override
  _i3.Future<dynamic> addNewTask({required _i2.PayloadNewTask? payload}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNewTask,
          [],
          {#payload: payload},
        ),
        returnValue: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);

  @override
  _i3.Future<dynamic> concludeTask({required _i2.Task? task}) =>
      (super.noSuchMethod(
        Invocation.method(
          #concludeTask,
          [],
          {#task: task},
        ),
        returnValue: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);

  @override
  _i3.Future<dynamic> deleteTask({required _i2.Task? task}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [],
          {#task: task},
        ),
        returnValue: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);
}

/// A class which mocks [TasksPresenter].
///
/// See the documentation for Mockito's code generation for more information.
class MockTasksPresenter extends _i1.Mock implements _i2.TasksPresenter {
  MockTasksPresenter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<dynamic> addNewTaskToList(
    _i2.PayloadNewTask? payload,
    _i4.BuildContext? context,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNewTaskToList,
          [
            payload,
            context,
          ],
        ),
        returnValue: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);

  @override
  _i3.Future<dynamic> setLoadedState({required List<_i2.Task>? tasksList}) =>
      (super.noSuchMethod(
        Invocation.method(
          #setLoadedState,
          [],
          {#tasksList: tasksList},
        ),
        returnValue: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);
}

/// A class which mocks [GetAllTasks].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllTasks extends _i1.Mock implements _i2.GetAllTasks {
  MockGetAllTasks() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ITasksRepository get tasksRepository => (super.noSuchMethod(
        Invocation.getter(#tasksRepository),
        returnValue: _FakeITasksRepository_1(
          this,
          Invocation.getter(#tasksRepository),
        ),
      ) as _i2.ITasksRepository);

  @override
  set tasksRepository(_i2.ITasksRepository? _tasksRepository) =>
      super.noSuchMethod(
        Invocation.setter(
          #tasksRepository,
          _tasksRepository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<List<_i2.Task>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i3.Future<List<_i2.Task>>.value(<_i2.Task>[]),
      ) as _i3.Future<List<_i2.Task>>);
}
